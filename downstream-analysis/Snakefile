"""Snakemake implementation."""
import pandas as pd
from scipy.stats import spearmanr


store = pd.HDFStore('../sra.h5', mode='r')
samples = store['aln/complete'].srx.unique().tolist()[::-1]
store.close()

rule targets:
    input: expand('output/samples/{srx}.parquet', srx=samples)


rule calc_corr:
    output: 'output/samples/{srx}.parquet'
    resources:
      mem_gb=lambda wildcards, attempt: attempt * 2,
      time_hr=lambda wildcards, attempt: attempt * 2
    run:
        srx1 = wildcards.srx
        idx = samples.index(srx1) + 1
        pth1 = Path(f'../aln-wf/output/gene_counts/{srx1}.parquet')
        df1 = pd.read_parquet(pth1).set_index('srx', append=True)

        res = [(srx1, srx1, 1.0), ]
        if idx < len(samples):
            for srx2 in samples[idx:]:
                pth2 = Path(f'../aln-wf/output/gene_counts/{srx2}.parquet')
                df2 = pd.read_parquet(pth2).set_index('srx', append=True)
                df = pd.concat([df1, df2]).unstack()
                _corr, _ = spearmanr(df)
                res.append((srx1, srx2, _corr))
                res.append((srx2, srx1, _corr))

        df = pd.DataFrame(res, columns=['srx1', 'srx2', '_corr'])
        df.set_index(['srx1', 'srx2'], inplace=True)
        df.to_parquet(output[0])
