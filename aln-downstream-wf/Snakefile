""" Downstream analysis for the alignment workflow results.

This is where I conduct all downstream analysis for the alignment workflow.

Rules
-----
targets
    create a list of desired output files
gene_lengths
    create a file containing gene lengths from feature counts
aggregate_gene_counts
    aggregates the gene counts files into a single matrix
normalize_gene_counts
    normalizes gene counts using CPM, TPM, or RPKM
"""

rule targets:
    input:
        '../output/aln-downstream-wf/gene_counts_wide.parquet',
        '../output/aln-downstream-wf/gene_lengths.parquet',
        '../output/aln-downstream-wf/gene_counts_wide_cpm.parquet',
        '../output/aln-downstream-wf/gene_counts_wide_rpkm.parquet',
        '../output/aln-downstream-wf/gene_counts_wide_tpm.parquet',
        '../output/aln-downstream-wf/gene_count_spearman_corr.parquet',


rule gene_lengths:
    output: '../output/aln-downstream-wf/gene_lengths.parquet'
    script: 'scripts/gene_lengths.py'


rule aggregate_gene_counts:
    output: '../output/aln-downstream-wf/gene_counts_wide.parquet',
    script: 'scripts/aggregate_genic_counts.py'


rule normalize_gene_counts:
    input:
        gene_lens=rules.gene_lengths.output,
        gene_counts=rules.aggregate_gene_counts.output,
    output:
        cpm='../output/aln-downstream-wf/gene_counts_wide_cpm.parquet',
        rpkm='../output/aln-downstream-wf/gene_counts_wide_rpkm.parquet',
        tpm='../output/aln-downstream-wf/gene_counts_wide_tpm.parquet',
    script: 'scripts/normalize_genic_counts.py'


rule aggregate_sum_genic_counts:
    output: '../output/aln-downstream-wf/aggregate_genic_counts.parquet'
    threads: 12
    resources: mem_gb=20
    script: 'scripts/aggregate_sum_genic_counts.py'


rule aggregate_sum_intergenic_counts:
    output: '../output/aln-downstream-wf/aggregate_intergenic_counts.parquet'
    threads: 12
    resources: mem_gb=20
    script: 'scripts/aggregate_sum_intergenic_counts.py'


rule aggregate_sum_junction_counts:
    output: '../output/aln-downstream-wf/aggregate_junction_counts.parquet'
    threads: 12
    resources: mem_gb=20
    script: 'scripts/aggregate_sum_junction_counts.py'


rule calc_corr:
    input: rules.aggregate_gene_counts.output[0]
    output: '../output/aln-downstream-wf/gene_count_spearman_corr.parquet'
    resources: mem_gb=150
    script: 'scripts/calc_corr.py'


# vim: set ft=snakemake.python
