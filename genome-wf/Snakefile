#!/usr/bin/env python
# vim: set ft=python.snakemake
import os
import sys

import pandas as pd

from snakemake.io import regex

from lcdblib.snakemake import helpers
from lcdblib.utils import utils

sys.path.insert(0, '../lib/python')
from ncbi_remap.snakemake import wrapper_for, put_flag

# Setup tempdir to work with lscratch
TMPDIR = os.path.join('/lscratch', os.getenv('SLURM_JOBID'))
shell.prefix("set -euo pipefail; export TMPDIR={};".format(TMPDIR))

# Set working dir
workdir: '.'

# import config
configfile: '../config/reference_config.yml'


################################################################################
# Build Sample Table
################################################################################
sample_table = pd.read_csv('wgs_samples.tsv', sep='\t')

# Grab a random set of 30 samples
sample_table = sample_table.sample(n=30, random_state=42).copy()

################################################################################
# Set up file naming patterns and targets
################################################################################

# Patterns
patterns = {
    'fastq': '../prealn-wf/output/samples/{srx}/{srr}/{srr}_1.fastq.gz',
    'bam': 'output/samples/{srx}/{srr}.fq.bam',
    'bai': 'output/samples/{srx}/{srr}.fq.bam.bai',
    'bedGraph': 'output/samples/{srx}/{srr}.fq.bam.bedgraph',
    'merged': 'output/genome_cov.bedgraph',

    # MISC Files
    'chromSizes': '../output/dm6.chrom.sizes',
    'chromSizes_fb': '../output/dmel_r6-11.flybase.chromsizes',
}


################################################################################
# Set up Build Targets
################################################################################
targets = helpers.fill_patterns(patterns, sample_table)

def keepers(targets):
    return [
       targets['merged']
    ]


rule targets:
    input: keepers(targets)


onsuccess:
    print('All Finished')


onerror:
    print('Something went wrong, you need to re-run')



################################################################################
# Alignment
################################################################################
rule hisat2:
    input:
        index=config['references']['dmel']['hisat2'],
        fastq=patterns['fastq'],
    output: bam=patterns['bam']
    threads: 8
    params:
        hisat2_extra='--max-intronlen 300000 ',
        samtools_view_extra="--threads 6 -q 20",
        samtools_sort_extra='--threads 6 -l 9 -m 3G -T $TMPDIR/samtools_sort'
    log: patterns['bam'] + '.log'
    wrapper:
        wrapper_for('../lcdb-wf/wrappers/wrappers/hisat2/align')


rule index:
    input:
        bam=patterns['bam']
    output:
        bai=patterns['bai']
    wrapper:
        wrapper_for('../lcdb-wf/wrappers/wrappers/samtools/index')

################################################################################
# Make Individual BedGraphs
################################################################################
rule bamCoverage:
    input:
        bam=patterns['bam'],
        bai=patterns['bai'],
    output: patterns['bedGraph']
    params:
        extra='--binSize 1 --outFileFormat bedgraph'
    threads: 8
    wrapper:
        wrapper_for('../lcdb-wf/wrappers/wrappers/deeptools/bamCoverage')


################################################################################
# Merge BedGraphs
################################################################################
rule merge:
    input:
        bedgraphs=targets['bedGraph'],
        genome=targets['chromSizes']
    output:
        bedgraph=patterns['merged']
    conda: '../config/extra_env.yaml'
    shell:
        "unionBedGraphs -g {input.genome} -empty -i {input.bedgraphs} > {output.bedgraph}"
