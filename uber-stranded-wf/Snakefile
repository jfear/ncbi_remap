"""Aggregated BigWig of extremely well stranded files.

"""

subworkflow metadata:
    workdir: '../metadata-wf'
    snakefile: '../metadata-wf/Snakefile'


subworkflow quality:
    workdir: '../quality-wf'
    snakefile: '../quality-wf/Snakefile'


rule targets:
    input:
        'output/uber_srxs.txt',
        'output/uber_stranded.flybase.plus.bw',
        'output/uber_stranded.flybase.minus.bw',


rule uber_srxs:
    input:
        libstrat=metadata('output/random_forest_library_strategy.parquet'),
        quality=quality('output/rnaseq_srx_quality_ranks.tsv'),
    output: 'output/uber_srxs.txt'
    params:
        strand_cutoff=.99,
        quality_cutoff=60,
    script: 'scripts/uber_srxs.py'


rule bigWigMerge_plus:
    input: rules.uber_srxs.output[0]
    output: temp('output/uber_stranded.plus.bg')
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 20,
        time_hr = lambda wildcards, attempt: attempt * 4
    run:
        with open(input[0]) as fh:
            srxs = fh.read().strip().split('\n')

        files = []
        for srx in srxs:
            files.append(f'../aln-wf/output/samples/{srx}/{srx}.first.bw')
        fnames = ' '.join(files)
        cmd = f'bigWigMerge {fnames} {output[0]}'
        print(cmd)
        shell(cmd)


rule bigWigMerge_minus:
    input: rules.uber_srxs.output[0]
    output: temp('output/uber_stranded.minus.bg')
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 20,
        time_hr = lambda wildcards, attempt: attempt * 4
    run:
        with open(input[0]) as fh:
            srxs = fh.read().strip().split('\n')

        files = []
        for srx in srxs:
            files.append(f'../aln-wf/output/samples/{srx}/{srx}.second.bw')
        fnames = ' '.join(files)
        shell(f'bigWigMerge {fnames} {output[0]}')


###############################################################################
# Make FlyBase Version
###############################################################################
rule convertToFlybase:
    input: 'output/uber_stranded.{strand}.bg'
    output: temp('output/uber_stranded.flybase.{strand}.bg')
    conda:
        'conda.yaml'
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 8,
        time_hr = lambda wildcards, attempt: attempt * 1
    shell:
        'chrom_convert '
        '--from UCSC '
        '--to FlyBase '
        '--fileType BED '
        '-i {input[0]} '
        '-o {output[0]}'


rule bgToBw:
    input:
        bg = 'output/uber_stranded.flybase.{strand}.bg',
        chrom = '../output/dmel_r6-11.flybase.chromsizes',
    output: 'output/uber_stranded.flybase.{strand}.bw'
    conda:
        'conda.yaml'
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 8,
        time_hr = lambda wildcards, attempt: attempt * 1
    shell:
        'bedSort {input.bg} $TMPDIR/sort.bg && '
        'bedGraphToBigWig $TMPDIR/sort.bg {input.chrom} {output[0]}'
