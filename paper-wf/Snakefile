"""Workflow for building parts of the paper."""

configfile: "../config/common.yaml"
ASSEMBLY = config["assembly"]
TAG = config["tag"]

rule all:
    input:
        # Data Wrangling
        # "../output/paper-wf/gene_metadata.tsv",
        # "../output/paper-wf/srx_metadata.tsv",
        # "../output/paper-wf/srx_prealn.tsv",
        # "../output/paper-wf/srx_aln.tsv",
        # "../output/paper-wf/aln_genic_counts.tsv",
        # Fig 1
        "../output/paper-wf/time_vs_number_samples_submitted.svg",
        # Fig 2
        "../output/paper-wf/umap_library_strategy.svg",
        "../output/paper-wf/mixin_outliers.svg",
        "../output/paper-wf/feature_importance.svg",
        "../output/paper-wf/shap.svg",
        # Table 1
        "../output/paper-wf/table1_library_strategy.csv",
        ## Supplement
        "../output/paper-wf/shap_panel.svg"


################################################################################
# Data Wrangling
################################################################################
rule gene_metadata:
    """Table mapping FBgn to various metadata"""
    input: f"../lcdb-references/{ASSEMBLY}/{TAG}/gtf/{ASSEMBLY}_{TAG}.gtf"
    output: "../output/paper-wf/gene_metadata.tsv"
    script: "scripts/gene_metadata.py"


rule srx_metadata:
    """Table mapping SRX to various metadata"""
    input: 
        # sramongo
        "../output/library_strategy-wf/summarized_metadata.parquet"
    output: "../output/paper-wf/srx_metadata.tsv"
    script: "scripts/srx_metadata.py"


# TODO: Change form hdf5
rule srr_prealn:
    """Table by SRR for all pre-alignment workflow results"""
    input: "../output/sra.h5"
    output: "../output/paper-wf/srr_prealn.tsv"
    script: "scripts/srr_prealn.py"


rule srx_prealn:
    """Table aggregated by SRX for all pre-alignment workflow results"""
    input: 
        srr=rules.srr_prealn.output[0],
        srx_metadata=rules.srx_metadata.output[0]
    output: "../output/paper-wf/srx_prealn.tsv"
    script: "scripts/srx_prealn.py"


# TODO: Update
rule rnaseq_srxs:
    """List of SRXs that are RNA-Seq"""
    input: "../output/library_strategy-wf/summarized_metadata.parquet",
    output: "../output/paper-wf/rnaseq_srxs.txt"
    script: "scripts/rnaseq_srxs.py"


# TODO: Change form hdf5
rule srx_aln:
    """Table by SRX for all alignment workflow results"""
    input:
        store="../output/sra.h5",
        rnaseq_srxs=rules.rnaseq_srxs.output[0],
        srx_metadata=rules.srx_metadata.output[0],
    output: "../output/paper-wf/srx_aln.tsv"
    script: "scripts/srx_aln.py"


# TODO: Update
rule aln_genic_counts:
    """Aggregated gene level counts for all RNA-Seq SRXs"""
    input: rules.rnaseq_srxs.output[0]
    params: 
        genic_pattern=lambda wildcards: "../output/aln-wf/samples/{srx}/{srx}.bam.counts"
    output: "../output/paper-wf/aln_genic_counts.tsv"
    script: "scripts/aln_genic_counts.py"

################################################################################
# Figure 1. Overview of SRA and data processing.
################################################################################
rule plot_time_vs_number_samples_submitted:
    output: "../output/paper-wf/time_vs_number_samples_submitted.svg"
    script: "scripts/plot_time_vs_number_samples_submitted.py"


################################################################################
# Table 1. Library strategy summary table
################################################################################
rule library_strategy_table:
    input: "../output/library_strategy-wf/sra_strategy_selection.parquet"
    output: "../output/paper-wf/table1_library_strategy.csv"
    run:
        import pandas as pd
        (
            pd.read_parquet(input[0])
            .library_strategy.value_counts()
            .rename("Number of Samples")
            .rename_axis("Library Strategy")
            .map(lambda x: f"{x:,}")
            .to_frame()
            .to_csv(output[0])
        )

################################################################################
# Figure 2. Technical metadata refinement.
################################################################################
rule plot_umap_library_strategy:
    input:
        umap="../output/library_strategy-wf/umap_prealn_features.parquet",
        iso="../output/library_strategy-wf/isolation_forest.pkl",
        labels="../output/library_strategy-wf/sra_strategy_selection.parquet",
    output: "../output/paper-wf/umap_library_strategy.svg"
    params:
        scatter_params=dict(s=7, edgecolors="w", linewidths=.2)
    script: "scripts/plot_umap_library_strategy.py"


rule plot_mixin_outliers:
    input: "../output/library_strategy-wf/contamination_mixin.parquet"
    output: "../output/paper-wf/mixin_outliers.svg"
    script: "scripts/plot_mixin_outliers.py"


rule plot_feature_importance:
    input: "../output/library_strategy-wf/isolation_forest.pkl"
    output: "../output/paper-wf/feature_importance.svg"
    script: "scripts/plot_feature_importance.py"


rule plot_shap:
    input: "../output/library_strategy-wf/isolation_forest.pkl"
    output: "../output/paper-wf/shap.svg"
    params:
        scatter_params=dict(s=7, edgecolors="w", linewidths=.2)
    script: "scripts/plot_shap.py"


# Supplement
rule plot_pairwise_feature_panels:
    """Plot pairwise feature plots for all 21 features"""
    input: "../output/library_strategy-wf/isolation_forest.pkl"
    output: expand("../output/paper-wf/pairwise_feature_panels/{i}.svg", i=range(1, 22))
    script: "scripts/plot_pairwise_feature_panels.py"


rule plot_shap_panel:
    input: "../output/library_strategy-wf/isolation_forest.pkl"
    output: "../output/paper-wf/shap_panel.svg"
    script: "scripts/plot_shap_panel.py"

################################################################################
# Figure 3. Biological metadata refinement.
################################################################################


################################################################################
# Figure 4. Visualization of aggregated tracks.
################################################################################


################################################################################
# Figure 5. Identification of similar datasets.
################################################################################


################################################################################
# Figure 6. Find highest expressing samples.
################################################################################


################################################################################
# Figure 7. Select genes with similar expression patterns.
################################################################################


################################################################################
# Figure 8. Data access.
################################################################################

