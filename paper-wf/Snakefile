"""Workflow for building parts of the paper."""

configfile: "../config/common.yaml"
ASSEMBLY = config["assembly"]
TAG = config["tag"]

PLOT_STYLE = "sra"
LABEL_SIZE = 12
LABEL_FONT = "Helvetica"
LABEL_WEIGHT = "bold"

rule all:
    input:
        # Data Wrangling
        "../output/paper-wf/gene_metadata.tsv",
        "../output/paper-wf/srx_prealn.tsv",
        "../output/paper-wf/srx_aln.tsv",
        "../output/paper-wf/aln_genic_counts.tsv",
        "../output/paper-wf/fig1.svg",


################################################################################
# Data Wrangling
################################################################################
rule gene_metadata:
    """Table mapping FBgn to various metadata"""
    input: f"../lcdb-references/{ASSEMBLY}/{TAG}/gtf/{ASSEMBLY}_{TAG}.gtf"
    output: "../output/paper-wf/gene_metadata.tsv"
    script: "scripts/gene_metadata.py"


rule srx_metadata:
    """Table mapping SRX to various metadata"""
    input: 
        # sramongo
        "../output/library_strategy-wf/summarized_metadata.parquet"
    output: "../output/paper-wf/srx_metadata.tsv"
    script: "scripts/srx_metadata.py"


rule srr_prealn:
    """Table by SRR for all pre-alignment workflow results"""
    input: "../output/sra.h5"
    output: "../output/paper-wf/srr_prealn.tsv"
    script: "scripts/srr_prealn.py"


rule srx_prealn:
    """Table aggregated by SRX for all pre-alignment workflow results"""
    input: 
        srr=rules.srr_prealn.output[0],
        srx_metadata=rules.srx_metadata.output[0]
    output: "../output/paper-wf/srx_prealn.tsv"
    script: "scripts/srx_prealn.py"


rule rnaseq_srxs:
    """List of SRXs that are RNA-Seq"""
    input: "../output/library_strategy-wf/summarized_metadata.parquet",
    output: "../output/paper-wf/rnaseq_srxs.txt"
    script: "scripts/rnaseq_srxs.py"


rule srx_aln:
    """Table by SRX for all alignment workflow results"""
    input:
        store="../output/sra.h5",
        rnaseq_srxs=rules.rnaseq_srxs.output[0],
        srx_metadata=rules.srx_metadata.output[0],
    output: "../output/paper-wf/srx_aln.tsv"
    script: "scripts/srx_aln.py"


rule aln_genic_counts:
    """Aggregated gene level counts for all RNA-Seq SRXs"""
    input: rules.rnaseq_srxs.output[0]
    params: 
        genic_pattern=lambda wildcards: "../output/aln-wf/samples/{srx}/{srx}.bam.counts"
    output: "../output/paper-wf/aln_genic_counts.tsv"
    script: "scripts/aln_genic_counts.py"

################################################################################
# Figure 1. Overview of SRA and data processing.
################################################################################
rule sample_submission_panel:
    input: rules.srx_prealn.output[0]
    output: "../output/paper-wf/figure_panels/sample_submission.svg"
    params:
        bar_plot_kwargs=dict(color="C0"),
        reg_plot_kwargs=dict(lowess=True, color="C1"),
    script: "scripts/plot_sample_submission.py"


rule fig1:
    input:
        drawing="../data/drawings/overview_schematic.svg",
        distribution=rules.sample_submission_panel.output[0]
    output: "../output/paper-wf/fig1.svg"
    params: 
        figsize=[7.7, 2.51],
        label_font=LABEL_FONT,
        label_size=LABEL_SIZE,
        label_weight=LABEL_WEIGHT,
    script: "scripts/fig1.py"


################################################################################
# Figure 2. Technical metadata refinement.
################################################################################
rule umap_library_strategy_panel:
    input: 
        embeddings="../output/library_strategy-wf/umap_prealn_features_embeddings.parquet",
        outliers="../output/library_strategy-wf/prealn_outliers.parquet"
    output: "../output/paper-wf/figure_panels/umap_library_strategy.svg"
    params:
        plot_kwargs=dict(linewidth=.25)
    script: "scripts/plot_umap_library_strategy.py"


rule isolation_score_panel:
    input: "../output/library_strategy-wf/prealn_outliers.parquet"
    output: "../output/paper-wf/figure_panels/isolation_score.svg"
    script: "scripts/plot_isolation_score.py"


rule feature_importance_panel:
    input: "../output/library_strategy-wf/random_forest_feature_importance.tsv"
    output: "../output/paper-wf/figure_panels/feature_importance.svg"
    params:
        style=PLOT_STYLE,
    script: "scripts/plot_feature_importance.py"


rule top_features_grid_panel:
    input: rules.srx_prealn.output[0]
    output: "../output/paper-wf/figure_panels/prealn_features.svg"
    params:
        style=PLOT_STYLE,
        top_features=["", "", "", ""]
    script: "scripts/plot_prealn_features.py"


rule umap_rnaseq_selection_panel:
    input: ""
    output: ""
    script: ""


rule fig2:
    input:
        umap_library_strategy_panel=rules.umap_library_strategy_panel.output[0],
        isolation_score_panel=rules.isolation_score_panel.output[0],
        drawing="../data/drawings/library_strategy.svg",
        importance=rules.feature_importance_panel.output[0],
    output: "../output/paper-wf/fig2.svg"
    params: 
        figsize=[7.7, 7.7],
        label_font=LABEL_FONT,
        label_size=LABEL_SIZE,
        label_weight=LABEL_WEIGHT,
    script: "scripts/fig2.py"


################################################################################
# Figure 3. Biological metadata refinement.
################################################################################
rule fig3:
    input:
        drawing="../data/drawings/",
        mahalanobis="",
    output: "../output/paper-wf/fig3.svg"
    params: 
        figsize=[7.7, 2.51],
        label_font=LABEL_FONT,
        label_size=LABEL_SIZE,
        label_weight=LABEL_WEIGHT,
    script: "scripts/fig3.py"


################################################################################
# Figure 4. Visualization of aggregated tracks.
################################################################################
rule fig4:
    input:
        drawing="../data/drawings/",
        stranded_tracks="",
        tissue_tracks="",
    output: "../output/paper-wf/fig4.svg"
    params: 
        figsize=[7.7, 2.51],
        label_font=LABEL_FONT,
        label_size=LABEL_SIZE,
        label_weight=LABEL_WEIGHT,
    script: "scripts/fig4.py"


################################################################################
# Figure 5. Identification of similar datasets.
################################################################################
rule fig5:
    input:
        drawing="../data/drawings/",
        hamming="",
        table="",
    output: "../output/paper-wf/fig5.svg"
    params: 
        figsize=[7.7, 2.51],
        label_font=LABEL_FONT,
        label_size=LABEL_SIZE,
        label_weight=LABEL_WEIGHT,
    script: "scripts/fig5.py"


################################################################################
# Figure 6. Find highest expressing samples.
################################################################################
rule fig6:
    input:
        drawing="../data/drawings/",
        expression_dist="",
        table="",
    output: "../output/paper-wf/fig6.svg"
    params: 
        figsize=[7.7, 2.51],
        label_font=LABEL_FONT,
        label_size=LABEL_SIZE,
        label_weight=LABEL_WEIGHT,
    script: "scripts/fig6.py"


################################################################################
# Figure 7. Select genes with similar expression patterns.
################################################################################
rule fig7:
    input:
        drawing="../data/drawings/",
        table="",
    output: "../output/paper-wf/fig7.svg"
    params: 
        figsize=[7.7, 2.51],
        label_font=LABEL_FONT,
        label_size=LABEL_SIZE,
        label_weight=LABEL_WEIGHT,
    script: "scripts/fig7.py"


################################################################################
# Figure 8. Data access.
################################################################################
rule fig8:
    input:
        drawing="../data/drawings/",
    output: "../output/paper-wf/fig8.svg"
    params: 
        figsize=[7.7, 2.51],
        label_font=LABEL_FONT,
        label_size=LABEL_SIZE,
        label_weight=LABEL_WEIGHT,
    script: "scripts/fig8.py"


################################################################################
# Supplemental Pre-alignment plots
################################################################################
rule layout:
    """Bar graph with the number of SRXs that are SE, PE, or PE->SE."""
    input: rules.srx_prealn.output[0]
    output: "../output/paper-wf/figure_panels/layout.svg"
    params:
        style=PLOT_STYLE,
        title="Library Layout",
        plot_kwargs=dict(color="lightgray", edgecolor="k"),
        ax_kwargs=dict(ylabel="Samples")
    script: "scripts/plot_layout.py"

rule read_length:
    """Boxplot showing the distribution of read lengths by year."""
    input: rules.srx_prealn.output[0]
    output: "../output/paper-wf/figure_panels/read_length.svg"
    params:
        style=PLOT_STYLE,
        title="Read Length",
        plot_kwargs=dict(
            showfliers=False,
            color="lightgray",
            boxprops=dict(edgecolor="k"),
            medianprops=dict(color="k"),
            whiskerprops=dict(color="k"),
            capprops=dict(color="k"),
        ),
        ax_kwargs=dict(ylabel="Avg. Read Length (bp)", xlabel="Year"),
    script: "scripts/plot_read_length.py"


rule library_size:
    """Joint plot of library size and duplication rate."""
    input: rules.srx_prealn.output[0]
    output: "../output/paper-wf/figure_panels/library_size.svg"
    params:
        style=PLOT_STYLE,
        title="Libary Size",
        plot_kwargs=dict(),
        joint_ax_kwargs=dict(),
        libsize_ax_kwargs=dict(),
        duplication_ax_kwargs=dict(),
    script: "scripts/plot_libsize.py"


################################################################################
# Supplemental Alignment plots
################################################################################
rule strandedness:
    """KDE of percent reads mapping to first strand."""
    input: rules.srx_prealn.output[0]
    output: "../output/paper-wf/figure_panels/strandedness.svg"
    params:
        style=PLOT_STYLE,
    script: "scripts/plot_strandedness.py"


rule mapping:
    """Point plot showing percent mapping by year."""
    input: rules.srx_aln.output[0]
    output: "../output/paper-wf/figure_panels/mapping.svg"
    params:
        style=PLOT_STYLE,
    script: "scripts/plot_mapping.py"

