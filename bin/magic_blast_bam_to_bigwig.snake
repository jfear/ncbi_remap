""" Builds a swarm file for converting bam to bigwig files using a list of SRAs.

"""
import os
from tempfile import NamedTemporaryFile
import pandas as pd
from lcdblib.snakemake.helpers import fill_patterns
from lcdblib.utils.utils import flatten

shell.prefix("""set -eo pipefail;
            if [ -e /lscratch/$SLURM_JOBID ]; then
                export TMPDIR=/lscratch/$SLURM_JOBID
            else
                export TMPDIR=/tmp
            fi;

            source activate ncbi_remap;
            """)
workdir: '.'

localrules: run

sample_id = [
             "SRR1164383",
             "SRR1164384",
             "SRR1164385",
             "SRR1164387",
             "SRR1164388",
             "SRR1164389",
             "SRR1164391",
             "SRR1164392",
             "SRR1164393",
             "SRR1164394",
             "SRR1164395",
             "SRR1164396",
             "SRR1164397",
             "SRR1164398",
             "SRR1164399",
             "SRR1164400",
             "SRR1164402",
            ]

patterns = {
    'orig_bam': '/data/MiegNCBI/magic_blast/mb_{sample_id}.sort.bam',
    'bam': '/data/MiegNCBI/magic_blast/{sample_id}.chr.sort.bam',
    'bai': '/data/MiegNCBI/magic_blast/{sample_id}.chr.sort.bam.bai',
    'bigwig': '/data/Oliverlab/project/ncbi_remap/output/BW/magic_blast/{sample_id}.{strand}.deeptools.bw',
    'merged': '/data/Oliverlab/project/ncbi_remap/output/BW/magic_blast.{strand}.deeptools.merged.bw',
    'chromSizes': '/data/LCDB/lcdb-references/dm6/fasta/dm6_default.chromsizes'
}

targets = fill_patterns(patterns, dict(sample_id=sample_id, strand=['Sf', 'Sr']))

# Rules
rule targets:
    """ Build Targets """
    input: flatten(targets['merged'])

rule chr:
    """ Convert NCBI chromosome to UCSC chromosome. """
    input: bam=patterns['orig_bam']
    output: bam=patterns['bam']
    shell: "chrom_convert --from RefSeq --to UCSC --fileType BAM -i {input.bam} -o {output.bam}"

rule bai:
    input: bam = patterns['bam']
    output: bai = patterns['bai']
    shell: "samtools index {input.bam}"

expDesc = pd.read_csv('../output/prealignment/rseqc_infer_experiment.txt', sep='\t', index_col=0)

rule bamToBigWig:
    input: bam = rules.chr.output.bam,
           bai = rules.chr.output.bam + '.bai'
    output: bigwig=patterns['bigwig']
    log: patterns['bigwig'] + '.log'
    run:
        try:
            if expDesc.loc[wildcards.sample_id, 'Type'] == 'PairEnd':
                if (wildcards.strand) == 'Sf':
                    # Exlude alignments on minus strand
                    flag = '--filterRNAstrand forward'
                else:
                    # Only inlude alignments on minus strand
                    flag = '--filterRNAstrand reverse'
                shell("bamCoverage --binSize 10 {flag} --bam {input.bam} -o {output.bigwig} 2>{log}")
            elif expDesc.loc[wildcards.sample_id, 'Type'] == 'SingleEnd':

                slurmid = os.getenv('SLURM_JOBID', '')
                if os.path.exists(os.path.join('/lscratch', slurmid)):
                    tdir = os.path.join('/lscratch', slurmid)
                else:
                    tdir = os.path.basename(output.bigwig)

                if (wildcards.strand) == 'Sf':
                    forward = NamedTemporaryFile(dir=tdir)
                    shell('samtools view -b -f 0x10 {input.bam} > {forward.name} '
                          '&& samtools index {forward.name} '
                          '&& bamCoverage --binSize 10 --bam {forward.name} -o {output.bigwig} 2>{log}')
                else:
                    reverse = NamedTemporaryFile(dir=tdir)
                    shell('samtools view -b -F 0x10 {input.bam} > {reverse.name} '
                          '&& samtools index {reverse.name} '
                          '&& bamCoverage --binSize 10 --bam {reverse.name} -o {output.bigwig} 2>{log}')
        except:
            print(wildcards)
            raise


rule mergeBW:
    input: bigwig = lambda x: fill_patterns(patterns, dict(sample_id=sample_id, strand=x.strand))['bigwig'],
           chrom = patterns['chromSizes']
    output: bigwig = patterns['merged']
    shell: """
    export LC_COLLATE=C

    # Create UCSC friendly merged bigwig
    bigWigMerge {input.bigwig} stdout | sort -k1,1 -k2,2n > $TMPDIR/tmp.bg

    bedGraphToBigWig $TMPDIR/tmp.bg {input.chrom} {output.bigwig}
    """
