"""Pre-alignment workflow.

The goal of the pre-alignment workflow is to determine technical metadata for
use as parameters in the alignment workflow. This workflow uses a queue in
`../output/sra.h5`. To update the queue you need to run `./prealn-store.py queue
update -j 8`. The major file types output by the pre-alignment workflow
include:

* Strand specific BigWig tracks
* Gene level coverage counts and junction counts
* Intergenic coverage counts and junction counts

"""
import os
import sys

sys.path.insert(0, "../src")
from ncbi_remap.queue import Queue
from ncbi_remap.snakemake import slack

# Setup tempdir to work with lscratch
if os.getenv("SLURM_JOBID"):
    TMPDIR = os.path.join('/lscratch', os.getenv('SLURM_JOBID'))
else:
    TMPDIR = os.getenv('TMPDIR', "/tmp")
shell.prefix("set -euo pipefail; export TMPDIR={};".format(TMPDIR))

singularity: "../singularity/drosSRA_workflow.sif"
configfile: '../config/reference_config.yaml'
onsuccess:
    print('All Finished')
    slack('prealn-wf: All Finished')
onerror:
    print('Something went wrong, you need to re-run')
    slack('prealn-wf: Something went wrong, you need to re-run') 

localrules: srr_complete, collectrnaseqmetrics_summary

###############################################################################
# Set up file naming patterns and targets
###############################################################################
queue = Queue(
    targets="../output/rnaseq_srxs.txt",
    completed="../output/prealn-wf/done.txt",
    problems=[
        "../output/fastq-wf/download_bad",
        "../output/fastq-wf/abi_solid",
        "../output/prealn-wf/atropos_bad",
        "../output/prealn-wf/alignment_bad",
    ],
    srx2srr="../output/srx2srr.csv",
    size=10
)

# If Dry-Run print queue
if any([x == "-n" for x in sys.argv]):
    print(queue)

rule run_all:
    input: expand("../output/prealn-wf/done/{srr}", srr=queue.srrs)

## Rules
rule fastq_dump:
    output: 
        r1="../output/fastq-wf/fastqs/{srr}_1.fastq.gz",
        r2="../output/fastq-wf/fastqs/{srr}_2.fastq.gz",
        layout="../output/fastq-wf/layout/{srr}.parquet",
        summary="../output/fastq-wf/libsize/{srr}.parquet"
    params:
        sra="../output/fastq-wf/sra_cache/{srr}.sra",
        download_bad="../output/fastq-wf/download_bad",
        abi_solid="../output/fastq-wf/abi_solid",
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 4,
        time_hr=lambda wildcards, attempt: attempt * 12
    log: "../output/fastq-wf/logs/{srr}.log"
    script: "../fastq-wf/scripts/fastq_dump.py"

rule fastq_screen:
    """Check for contamination."""
    input: rules.fastq_dump.output.r1
    output: "../output/prealn-wf/fastq_screen/{srr}.parquet"
    log: "../output/prealn-wf/samples/{srr}/fastq_screen.log"
    params:
        references=dict(
            dm6="../lcdb-references/dmel/r6-11/bowtie2/dmel_r6-11",
            hg19="../lcdb-references/human/gencode-v19/bowtie2/human_gencode-v19",
            wolbachia="../lcdb-references/wolbachia/default/bowtie2/wolbachia_default",
            ecoli="../lcdb-references/ecoli/default/bowtie2/ecoli_default",
            yeast="../lcdb-references/sacCer3/default/bowtie2/sacCer3_default",
            rRNA="../lcdb-references/dmel/rRNA/bowtie2/dmel_rRNA",
            phix="../lcdb-references/phix/default/bowtie2/phix_default",
            ercc="../lcdb-references/ercc/srm2374/bowtie2/ercc_srm2374",
            adapters="../lcdb-references/adapters/default/bowtie2/adapters_default",
        )
    threads: 4
    script: "scripts/fastq_screen.py"

rule atropos:
    """Filter reads that are less than 25bp."""
    input:
        r1=rules.fastq_dump.output.r1,
        r2=rules.fastq_dump.output.r2,
        layout=rules.fastq_dump.output.layout,
    output:
        r1="../output/prealn-wf/samples/{srr}/{srr}_1.trim.fastq.gz",
        r2="../output/prealn-wf/samples/{srr}/{srr}_2.trim.fastq.gz",
        summary="../output/prealn-wf/atropos/{srr}.parquet",
    params:
        extra_pe='-U 0 --minimum-length 25',
        extra_se='--minimum-length 25',
    log: "../output/prealn-wf/samples/{srr}/atropos.log"
    threads: 4
    script: "../scripts/atropos.py"

rule hisat2:
    """Basic alignment."""
    input:
        r1=rules.atropos.output.r1,
        r2=rules.atropos.output.r2,
        layout=rules.fastq_dump.output.layout,
    output:
        bam="../output/prealn-wf/samples/{srr}/{srr}.hisat2.bam",
        bai="../output/prealn-wf/samples/{srr}/{srr}.hisat2.bam.bai",
        hisat_summary="../output/prealn-wf/hisat2/{srr}.parquet",
        aln_stats="../output/prealn-wf/aln_stats/{srr}.parquet",
    log: "../output/prealn-wf/logs/hisat2/{srr}.log"
    params:
        reference="../lcdb-references/dmel/r6-11/hisat2/dmel_r6-11",
        splice_sites="../output/known_splice_sites_r6-11.txt",
    threads: 4
    script: "../scripts/hisat2.py"


rule srr_complete:
    input: 
        rules.fastq_screen_summary.output[0],
        rules.atropos_check.output[0],
        rules.hisat2_check.output[0],
        rules.aln_stats_summary.output[0],
        rules.collectrnaseqmetrics_summary.output.strand,
        rules.collectrnaseqmetrics_summary.output.table,
        rules.collectrnaseqmetrics_summary.output.genebody_coverage,
        rules.markduplicates_summary.output[0],
        rules.featurecounts_summary.output[0],
    output: "../output/prealn-wf/done/{srr}"
    params: 
        sample_id=lambda wildcards: wildcards.srr,
        sample_folder=lambda wildcards: queue.expand("../output/prealn-wf/samples/{srx}/{srr}", wildcards.srr),
        done_queue="../output/prealn-wf/done.txt",
    script: "../scripts/done_queue.py"
