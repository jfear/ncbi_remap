"""Pre-alignment workflow.

The goal of the pre-alignment workflow is to determine technical metadata for
use as parameters in the alignment workflow. This workflow uses a queue in
`../output/sra.h5`. To update the queue you need to run `./prealn-store.py queue
update -j 8`. The major file types output by the pre-alignment workflow
include:

* Strand specific BigWig tracks
* Gene level coverage counts and junction counts
* Intergenic coverage counts and junction counts

"""
import os
import sys

import numpy as np

sys.path.insert(0, "../src")
from ncbi_remap.queue import Queue
from ncbi_remap.snakemake import slack

# Setup tempdir to work with lscratch
if os.getenv("SLURM_JOBID"):
    TMPDIR = os.path.join('/lscratch', os.getenv('SLURM_JOBID'))
else:
    TMPDIR = os.getenv('TMPDIR', "/tmp")
shell.prefix("set -euo pipefail; export TMPDIR={};".format(TMPDIR))

singularity: "../singularity/drosSRA_workflow.sif"

onsuccess:
    print('All Finished')
    slack('prealn-wf: All Finished')
onerror:
    print('Something went wrong, you need to re-run')
    slack('prealn-wf: Something went wrong, you need to re-run') 

localrules: run_all, srr_complete

###############################################################################
# Set up file naming patterns and targets
###############################################################################
queue = Queue(
    targets="../output/rnaseq_srxs.txt",
    completed="../output/prealn-wf/done.txt",
    problems=[
        "../output/fastq-wf/download_bad",
        "../output/fastq-wf/abi_solid",
        "../output/prealn-wf/atropos_bad",
        "../output/prealn-wf/alignment_bad",
    ],
    srx2srr="../output/srx2srr.csv",
    size=10
)

# If Dry-Run print queue
if any([x == "-n" for x in sys.argv]):
    print(queue)

###############################################################################
# Resources
###############################################################################
LIBSIZES = queue.srx2srr[["srr", "libsize"]].set_index("srr").squeeze()
THREADS = 4
def estimate_resources(wildcards):
    scale = np.floor(np.log10(LIBSIZES[wildcards.srr]))
    if scale <= 3:
        return dict(mem_gb=4, time_hr=1, lscratch=10)
    elif scale <= 6:
        return dict(mem_gb=4, time_hr=2, lscratch=25)
    elif scale <= 7:
        return dict(mem_gb=6, time_hr=4, lscratch=60)
    else:
        return dict(mem_gb=6, time_hr=16, lscratch=200)

def estimate_resources_mem(wildcards):
    return estimate_resources(wildcards)["mem_gb"]

def estimate_resources_time(wildcards):
    return estimate_resources(wildcards)["time_hr"]

def estimate_resources_lscratch(wildcards):
    return estimate_resources(wildcards)["lscratch"]

###############################################################################
# Rules
###############################################################################
rule run_all:
    input: expand("../output/prealn-wf/done/{srr}", srr=queue.srrs)

rule fastq_dump:
    output: 
        r1=temp("../output/fastq-wf/fastqs/{srr}_1.fastq.gz"),
        r2=temp("../output/fastq-wf/fastqs/{srr}_2.fastq.gz"),
        layout="../output/fastq-wf/layout/{srr}.parquet",
        summary="../output/fastq-wf/libsize/{srr}.parquet"
    log: "../output/fastq-wf/logs/{srr}.log"
    params:
        sra="../output/fastq-wf/sra_cache/{srr}.sra",
        download_bad="../output/fastq-wf/download_bad",
        abi_solid="../output/fastq-wf/abi_solid",
    group: "prealn-wf"
    threads: THREADS
    resources: 
        mem_gb=estimate_resources_mem,
        time_hr=estimate_resources_time,
        lscratch=estimate_resources_lscratch,
    script: "../fastq-wf/scripts/fastq_dump.py"

rule fastq_screen:
    """Check for contamination."""
    input: rules.fastq_dump.output.r1
    output: "../output/prealn-wf/fastq_screen/{srr}.parquet"
    log: "../output/prealn-wf/logs/fastq_screen/{srr}.log"
    params:
        references=dict(
            dm6="../lcdb-references/dmel/r6-11/bowtie2/dmel_r6-11",
            hg19="../lcdb-references/human/gencode-v19/bowtie2/human_gencode-v19",
            wolbachia="../lcdb-references/wolbachia/default/bowtie2/wolbachia_default",
            ecoli="../lcdb-references/ecoli/default/bowtie2/ecoli_default",
            yeast="../lcdb-references/sacCer3/default/bowtie2/sacCer3_default",
            rRNA="../lcdb-references/dmel/rRNA/bowtie2/dmel_rRNA",
            phix="../lcdb-references/phix/default/bowtie2/phix_default",
            ercc="../lcdb-references/ercc/srm2374/bowtie2/ercc_srm2374",
            adapters="../lcdb-references/adapters/default/bowtie2/adapters_default",
        )
    group: "prealn-wf"
    threads: THREADS
    resources: 
        mem_gb=estimate_resources_mem,
        time_hr=estimate_resources_time,
        lscratch=estimate_resources_lscratch,
    script: "scripts/fastq_screen.py"

rule atropos:
    """Filter reads that are less than 25bp."""
    input:
        r1=rules.fastq_dump.output.r1,
        r2=rules.fastq_dump.output.r2,
        layout=rules.fastq_dump.output.layout,
    output:
        r1=temp("../output/prealn-wf/samples/{srr}/{srr}_1.trim.fastq.gz"),
        r2=temp("../output/prealn-wf/samples/{srr}/{srr}_2.trim.fastq.gz"),
        summary="../output/prealn-wf/atropos/{srr}.parquet",
    log: "../output/prealn-wf/logs/atropos/{srr}.log"
    params:
        atropos_bad="../output/prealn-wf/atorpos_bad",
        extra_pe='-U 0 --minimum-length 25',
        extra_se='--minimum-length 25',
    group: "prealn-wf"
    threads: THREADS
    resources: 
        mem_gb=estimate_resources_mem,
        time_hr=estimate_resources_time,
        lscratch=estimate_resources_lscratch,
    script: "../scripts/atropos.py"

rule hisat2:
    """Basic alignment."""
    input:
        r1=rules.atropos.output.r1,
        r2=rules.atropos.output.r2,
        layout=rules.fastq_dump.output.layout,
    output:
        bam=temp("../output/prealn-wf/samples/{srr}/{srr}.hisat2.bam"),
        bai=temp("../output/prealn-wf/samples/{srr}/{srr}.hisat2.bam.bai"),
        hisat_summary="../output/prealn-wf/hisat2/{srr}.parquet",
        aln_stats="../output/prealn-wf/aln_stats/{srr}.parquet",
    log: "../output/prealn-wf/logs/hisat2/{srr}.log"
    params:
        reference="../lcdb-references/dmel/r6-11/hisat2/dmel_r6-11",
        splice_sites="../output/known_splice_sites_r6-11.txt",
    group: "prealn-wf"
    threads: THREADS
    resources: 
        mem_gb=estimate_resources_mem,
        time_hr=estimate_resources_time,
        lscratch=estimate_resources_lscratch,
    script: "../scripts/hisat2.py"

rule collectrnaseqmetrics:
    input:
        bam=rules.hisat2.output.bam,
        refflat="../lcdb-references/dmel/r6-11/gtf/dmel_r6-11.refflat",
    output:
        strand="../output/prealn-wf/strand/{srr}.parquet",
        table="../output/prealn-wf/rnaseqmetrics/{srr}.parquet",
        genebody_coverage="../output/prealn-wf/genebody_coverage/{srr}.parquet",
    log: "../output/prealn-wf/logs/rnaseqmetrics/{srr}.log"
    group: "prealn-wf"
    threads: THREADS
    resources: 
        mem_gb=estimate_resources_mem,
        time_hr=estimate_resources_time,
        lscratch=estimate_resources_lscratch,
    script: "scripts/picard_rnaseqmetrics.py"

rule markduplicates:
    input: rules.hisat2.output.bam
    output: "../output/prealn-wf/markduplicates/{srr}.parquet"
    log: "../output/prealn-wf/logs/markduplicates/{srr}.log"
    group: "prealn-wf"
    threads: THREADS
    resources: 
        mem_gb=estimate_resources_mem,
        time_hr=estimate_resources_time,
        lscratch=estimate_resources_lscratch,
    script: "scripts/markduplicates.py"

rule feature_counts:
    input:
        bam=rules.hisat2.output.bam,
        gtf="../lcdb-references/dmel/r6-11/gtf/dmel_r6-11.gtf",
        layout=rules.fastq_dump.output.layout,
        strand=rules.collectrnaseqmetrics.output.strand,
    output: "../output/prealn-wf/count_summary/{srr}.parquet",
    log: "../output/prealn-wf/logs/featurecounts/{srr}.log"
    group: "prealn-wf"
    threads: THREADS
    resources: 
        mem_gb=estimate_resources_mem,
        time_hr=estimate_resources_time,
        lscratch=estimate_resources_lscratch,
    script: "scripts/featurecounts.py"

rule srr_complete:
    input: 
        rules.fastq_screen.output[0],
        rules.atropos.output.summary,
        rules.hisat2.output.hisat_summary,
        rules.hisat2.output.aln_stats,
        rules.collectrnaseqmetrics.output.strand,
        rules.collectrnaseqmetrics.output.table,
        rules.collectrnaseqmetrics.output.genebody_coverage,
        rules.markduplicates.output[0],
        rules.feature_counts.output[0],
    output: temp("../output/prealn-wf/done/{srr}")
    shell: """
    rm -r ../output/prealn-wf/samples/{wildcards.srr} &&
    touch {output[0]} &&
    echo {wildcards.srr} >> ../output/prealn-wf/done.txt
    """
