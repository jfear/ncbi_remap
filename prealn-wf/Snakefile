"""Pre-alignment workflow.

The goal of the pre-alignment workflow is to determine technical metadata for
use as parameters in the alignment workflow. This workflow uses a queue in
`../output/sra.h5`. To update the queue you need to run `./prealn-store.py queue
update -j 8`. The major file types output by the pre-alignment workflow
include:

* Strand specific BigWig tracks
* Gene level coverage counts and junction counts
* Intergenic coverage counts and junction counts

"""
import os
import sys

sys.path.insert(0, "../src")
from ncbi_remap.queue import Queue
from ncbi_remap.snakemake import slack

# Setup tempdir to work with lscratch
if os.getenv("SLURM_JOBID"):
    TMPDIR = os.path.join('/lscratch', os.getenv('SLURM_JOBID'))
else:
    TMPDIR = os.getenv('TMPDIR', "/tmp")
shell.prefix("set -euo pipefail; export TMPDIR={};".format(TMPDIR))

singularity: "../singularity/drosSRA_workflow.sif"
configfile: '../config/reference_config.yaml'
onsuccess:
    print('All Finished')
    slack('prealn-wf: All Finished')
onerror:
    print('Something went wrong, you need to re-run')
    slack('prealn-wf: Something went wrong, you need to re-run') 

localrules: srr_complete, collectrnaseqmetrics_summary

###############################################################################
# Set up file naming patterns and targets
###############################################################################
queue = Queue(
    completed="../output/prealn-wf/done",
    problems=[
        "../output/fastq-wf/download_bad",
        "../output/fastq-wf/abi_solid",
        "../output/prealn-wf/atropos_bad",
        "../output/prealn-wf/alignment_bad",
    ],
    srx2srr="../output/srx2srr.csv",
    size=1_000
)

# If Dry-Run print queue
if any([x == "-n" for x in sys.argv]):
    print(queue)

rule run_all:
    input: expand("../output/prealn-wf/done/{srr}", srr=queue.srrs)

## Rules
include: "../fastq-wf/rules/download_fastq.smk"
include: "rules/fastq_screen.smk"
include: "rules/atropos.smk"
include: "rules/align.smk"
include: "rules/rnaseqmetrics.smk"
include: "rules/featurecounts.smk"
include: "rules/markduplicates.smk"

rule srr_complete:
    input: 
        rules.fastq_screen_summary.output[0],
        rules.atropos_check.output[0],
        rules.hisat2_check.output[0],
        rules.parse_stats.output[0],
        rules.collectrnaseqmetrics_summary.output.flag,
        rules.collectrnaseqmetrics_summary.output.table,
        rules.collectrnaseqmetrics_summary.output.gene_coverage,
        rules.featurecounts_summary.output[0],
        rules.markduplicates_summary.output[0],
    output: touch("../output/prealn-wf/done/{srr}")
