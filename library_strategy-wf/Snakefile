""" Library Strategy processing workflow

`Library Strategy` is the description of what kind of sequencing was done
(i.e., RNA-Seq, ChIP-Seq, WGS). The SRA uses higher level terms that may not
be the most accurate description of a sample. I would like to provide more
detailed descriptions of the sample if they are availabled in the free text
metadata. I also want to validate the high level metadata, to ensure that
submissions with a mixture of strategies (e.g., RNA-Seq and ChIP-Seq) did not
swap any sample labels.

I will focus on RNA-Seq samples for downstream analysis, so it is most
important that these samples are correctly identified. I will use a data
driven machine learning approach. I will use various features from the
`prealn-wf` with a cross validation approach to confidently identify samples
that behave as expected.

"""
singularity: "../singularity/drosSRA_workflow.sif"

rule targets:
    input:
        "../output/library_strategy-wf/rnaseq_outliers.parquet",
        "../output/library_strategy-wf/rnaseq.pkl",
        # "../output/library_strategy-wf/pca_prealn_features_embeddings.parquet",
        # "../output/library_strategy-wf/library_strategy_outlier_shap_metrics.parquet",
        # Figures
        # "../output/library_strategy-wf/library_strategy.svg",
        # "../output/library_strategy-wf/library_strategy_outliers.svg",


rule pull_sra_strategy_and_selection_from_mongo:
    output:
        data="../output/library_strategy-wf/sra_strategy_selection.parquet",
        summary="../output/library_strategy-wf/sra_strategy_selection_summary_table.tsv",
    script: "scripts/pull_sra_strategy_and_selection_from_mongo.py"


################################################################################
# Prep Features
################################################################################
rule build_prealn_features:
    input: "../output/srx2srr.csv"
    params:
        libsize="../output/fastq-wf/libsize",
        fastq_screen="../output/prealn-wf/fastq_screen",
        atropos="../output/prealn-wf/atropos",
        hisat2="../output/prealn-wf/hisat2",
        aln_stats="../output/prealn-wf/aln_stats",
        rnaseqmetrics="../output/prealn-wf/rnaseqmetrics",
        genebody_coverage="../output/prealn-wf/genebody_coverage",
        markduplicates="../output/prealn-wf/markduplicates",
        count_summary="../output/prealn-wf/count_summary",
        done="../output/prealn-wf/done"
    threads: 8
    output: "../output/library_strategy-wf/prealn_features.parquet",
    script: "scripts/build_prealn_features.py"


rule scale_prealn_features:
    input: rules.build_prealn_features.output[0]
    output: "../output/library_strategy-wf/scaled_prealn_features.parquet"
    script: "scripts/scale_prealn_features.py"


rule pca_prealn_features:
    input: rules.scale_features.output[0]
    output: 
        embeddings="../output/library_strategy-wf/pca_prealn_features_embeddings.parquet",
        loadings="../output/library_strategy-wf/pca_prealn_features_loadings.parquet",
        variance="../output/library_strategy-wf/pca_prealn_features_explained_variance.parquet",
    script: "scripts/pca_prealn_features.py"


rule umap_prealn_features:
    input: rules.scale_features.output[0]
    output: "../output/library_strategy-wf/umap_prealn_features.parquet",
    script: "scripts/umap_prealn_features.py"


################################################################################
# Find RNA-Seq Outliers
################################################################################
rule rnaseq_features:
    input:
        features=rules.build_prealn_features.output.features,
        labels=rules.pull_sra_strategy_and_selection_from_mongo.output.data
    output: "../output/library_strategy-wf/rnaseq_features.parquet"
    script: "scripts/rnaseq_features.py"


rule outlier_detection:
    input:
        features=rules.rnaseq_features.output[0],
        labels=rules.pull_sra_strategy_and_selection_from_mongo.output.data
    output: 
        outliers="../output/library_strategy-wf/rnaseq_outliers.parquet",
        rnaseq_samples="../output/library_strategy-wf/rnaseq.pkl",
        shap_model="../output/library_strategy-wf/shap_model.joblib.pkl",
        shap_features="../output/library_strategy-wf/shap_features.joblib.pkl",
        shap_values="../output/library_strategy-wf/shap_values.joblib.pkl",
        mixin="../output/library_strategy-wf/contamination_mixin.parquet",
    script: "scripts/outlier_detection.py"


################################################################################
# Plots
################################################################################
rule library_strategy_umap:
    input: 
        umap=rules.umap_prealn_feature_set.output.embeddings,
        labels=rules.pull_sra_strategy_and_selection_from_mongo.output.data,
    output: "../output/library_strategy-wf/library_strategy_umap.svg"
    script: "scripts/library_strategy_umap.py"


rule rnaseq_outlier_umap:
    input: 
        umap=rules.umap_prealn_feature_set.output.embeddings,
        labels=rules.pull_sra_strategy_and_selection_from_mongo.output.data,
        outliers=rules.outlier_detection.output.outliers,
    output: "../output/library_strategy-wf/rnaseq_outlier_umap.svg"
    script: "scripts/rnaseq_outlier_umap.py"


rule outlier_detection_feature_importance:
    input: 
        shap_model=rules.outlier_detection.output.shap_model,
        shap_features=rules.outlier_detection.output.shap_features,
        shap_values=rules.outlier_detection.output.shap_values,
    output: "../output/library_strategy-wf/outlier_detection_feature_importance.svg"
    script: "scripts/outlier_detection_feature_importance.py"


rule outlier_detection_contamination:
    input: rules.outlier_detection.output.mixin
    output: "../output/library_strategy-wf/outlier_detection_contamination.svg"
    script: "scripts/outlier_detection_contamination.py"


################################################################################
# Refine library strategy and selection metadata using free text
################################################################################
rule free_text_library_strategy:
    output: "../output/library_strategy-wf/free_text_library_strategy.parquet"
    script: "scripts/free_text_library_strategy.py"

# TODO: Re-think aggregation because I removed RF.
rule metadata_integration:
    input:
        sra=rules.pull_sra_strategy_and_selection_from_mongo.output.data,
        free_text=rules.free_text_library_strategy.output[0],
        # forest=rules.random_forest.output["predicted_labels"],
    output: "../output/library_strategy-wf/summarized_metadata.parquet"
    script: "scripts/metadata_integration.py"
