""" Library Strategy processing workflow

`Library Strategy` is the description of what kind of sequencing was done
(i.e., RNA-Seq, ChIP-Seq, WGS). The SRA uses higher level terms that may not
be the most accurate description of a sample. I would like to provide more
detailed descriptions of the sample if they are availabled in the free text
metadata. I also want to validate the high level metadata, to ensure that
submissions with a mixture of strategies (e.g., RNA-Seq and ChIP-Seq) did not
swap any sample labels.

I will focus on RNA-Seq samples for downstream analysis, so it is most
important that these samples are correctly identified. I will use a data
driven machine learning approach. I will use various features from the
`prealn-wf` with a cross validation approach to confidently identify samples
that behave as expected.

Rules
-----
targets
    create a list of desired output files
free_text_library_strategy
    Parse free text for additional library strategy information
munge_library_strategy_from_mongo
    Pulls out the author supplied metadata field for library strategy and
    selection
build_feature_set
    Pulls together different features from the pre-alignment workflow
random_forest
    Random Forest to learn library startegy and selection
select_library_strategy
    Takes library strategy annotations from SRA, metadata, random forest and
    selects the best category.

"""
rule targets:
    input:
        "../output/library_strategy-wf/summarized_metadata.parquet",
        "../output/library_strategy-wf/umap_prealn_features_embeddings.tsv",
        "../output/library_strategy-wf/pca_prealn_features_embeddings.tsv",
        "../output/library_strategy-wf/library_strategy.svg",
        "../output/library_strategy-wf/library_selection.svg",


rule free_text_library_strategy:
    output: "../output/library_strategy-wf/free_text_library_strategy.parquet"
    script: "scripts/free_text_library_strategy.py"


rule munge_strategy_and_selection_from_mongo:
    output:
        data="../output/library_strategy-wf/sra_strategy_selection.parquet",
        summary="../output/library_strategy-wf/sra_strategy_selection_summary_table.tsv",
    script: "scripts/munge_strategy_and_selection_from_mongo.py"


rule build_prealn_feature_set:
    input: "../output/sra.h5"
    params:
        genic_counts="../output/prealn-wf/gene_counts",
        junction_counts="../output/prealn-wf/junction_counts",
    output: "../output/library_strategy-wf/prealn_feature_set.parquet"
    script: "scripts/build_prealn_feature_set.py"

rule scale_feature_set:
    input: rules.build_prealn_feature_set.output[0]
    output: "../output/library_strategy-wf/scaled_prealn_feature_set.parquet"
    script: "scripts/scale_prealn_features.py"


rule pca_prealn_feature_set:
    input: rules.scale_feature_set.output[0]
    output: 
        embeddings="../output/library_strategy-wf/pca_prealn_features_embeddings.tsv",
        loadings="../output/library_strategy-wf/pca_prealn_features_loadings.tsv",
        variance="../output/library_strategy-wf/pca_prealn_features_explained_variance.tsv",
    script: "scripts/pca_prealn_feature_set.py"


rule umap_prealn_feature_set:
    input: rules.scale_feature_set.output[0]
    output: 
        embeddings="../output/library_strategy-wf/umap_prealn_features_embeddings.tsv",
        model="../output/library_strategy-wf/umap_prealn_features_model.joblib.pkl"
    script: "scripts/umap_prealn_feature_set.py"


rule panel_plots:
    input: 
        labels=rules.munge_strategy_and_selection_from_mongo.output.data,
        umap=rules.umap_prealn_feature_set.output.embeddings
    output: 
        strategy="../output/library_strategy-wf/library_strategy.svg",
        selection="../output/library_strategy-wf/library_selection.svg"
    script: "scripts/panel_plots.py"


rule outlier_detection:
    input:
        features=rules.scale_feature_set.output[0],
        labels=rules.munge_strategy_and_selection_from_mongo.output.data,
    output: "../output/library_strategy-wf/prealn_outliers.parquet"
    script: "scripts/outlier_detection.py"


rule random_forest:
    input:
        labels=rules.munge_strategy_and_selection_from_mongo.output.data,
        features=rules.build_prealn_feature_set.output[0],
    threads: 10
    output:
        metrics="../output/library_strategy-wf/random_forest_metrics.tsv",
        feature_importance="../output/library_strategy-wf/random_forest_feature_importance.tsv",
        predicted_labels="../output/library_strategy-wf/random_forest_predicted_labels.parquet"
    script: "scripts/random_forest.py"


rule metadata_integration:
    input:
        sra=rules.munge_strategy_and_selection_from_mongo.output.data,
        free_text=rules.free_text_library_strategy.output[0],
        forest=rules.random_forest.output["predicted_labels"],
    output: "../output/library_strategy-wf/summarized_metadata.parquet"
    script: "scripts/metadata_integration.py"
