"""RNA-Seq Alignment workflow.

"""
import os
import sys
from pathlib import Path

import numpy as np
from more_itertools import chunked, flatten

sys.path.insert(0, "../src")
from ncbi_remap.queue import Queue


# Setup tempdir to work with lscratch
if os.getenv("SLURM_JOBID"):
    TMPDIR = os.path.join('/lscratch', os.getenv('SLURM_JOBID'))
else:
    TMPDIR = os.getenv('TMPDIR', "/tmp")
shell.prefix("set -euo pipefail; export TMPDIR={};".format(TMPDIR))

singularity: "../singularity/drosSRA_workflow.sif"
configfile: '../config/reference_config.yaml'

###############################################################################
# Set up file naming patterns and targets
###############################################################################
queue = Queue(
    targets="../output/rnaseq-wf/done.txt",
    subset="../output/prealn-wf/done.txt",
    completed="../output/rnaseq-counts-wf/done.txt",
    srx2srr="../output/srx2srr.csv",
    size=100,
)

chunks = {str(i): chunk for i, chunk in enumerate(chunked(queue.srxs, 999))}

localrules: run_all, srx_complete

# If Dry-Run print queue
if any([x == "-n" for x in sys.argv]):
    print(queue)

###############################################################################
# Resources
###############################################################################
THREADS = 4
MEM = 8
LSCRATCH = 10
TIME = 8

###############################################################################
# Rules
###############################################################################
rule run_all:
    input: expand("../output/rnaseq-counts-wf/done/{group}", group=chunks.keys())

rule gene_counts:
    input:
        bam="../output/rnaseq-wf/bams/{srx}/{srx}.bam",
        gtf="../lcdb-references/dmel/r6-11/gtf/dmel_r6-11.gtf",
        layout=lambda wildcards: queue.expand("../output/fastq-wf/layout/{srr}.parquet", wildcards.srx)[0],
        strand=lambda wildcards: queue.expand("../output/prealn-wf/strand/{srr}.parquet", wildcards.srx)[0]
    output:
        counts="../output/rnaseq-counts-wf/gene_counts/{srx}.bam.counts.txt.gz",
        jcounts="../output/rnaseq-counts-wf/gene_counts/{srx}.bam.counts.jcounts.txt.gz",
    log: "../output/rnaseq-counts-wf/logs/gene_counts/{srx}.log"
    params:
        extra_pe = '-p -P -C -J ',
        extra_se = '-J '
    group: "rnaseq-counts-wf"
    threads: THREADS
    # resources:
    #     mem_gb=MEM,
    #     time_hr=TIME,
    #     lscratch=LSCRATCH,
    script: "scripts/featurecounts.py"

rule intergenic_counts:
    input:
        bam="../output/rnaseq-wf/bams/{srx}/{srx}.bam",
        gtf="../output/dmel_r6-11.intergenic.gtf",
        layout=lambda wildcards: queue.expand("../output/fastq-wf/layout/{srr}.parquet", wildcards.srx)[0],
        strand=lambda wildcards: queue.expand("../output/prealn-wf/strand/{srr}.parquet", wildcards.srx)[0]
    output:
        counts="../output/rnaseq-counts-wf/intergenic_counts/{srx}.bam.intergenic.counts.txt.gz",
        jcounts="../output/rnaseq-counts-wf/intergenic_counts/{srx}.bam.intergenic.counts.jcounts.txt.gz",
    log: "../output/rnaseq-counts-wf/logs/intergenic_counts/{srx}.log"
    params:
        extra_pe = '-p -P -C -J -t gene ',
        extra_se = '-J -t gene '
    group: "rnaseq-counts-wf"
    threads: THREADS
    # resources:
    #     mem_gb=MEM,
    #     time_hr=TIME,
    #     lscratch=LSCRATCH,
    script: "scripts/featurecounts.py"

rule segment_counts:
    input:
        bam="../output/rnaseq-wf/bams/{srx}/{srx}.bam",
        gtf="../output/nonstranded_exon_segments.gtf",
        layout=lambda wildcards: queue.expand("../output/fastq-wf/layout/{srr}.parquet", wildcards.srx)[0],
        strand=lambda wildcards: queue.expand("../output/prealn-wf/strand/{srr}.parquet", wildcards.srx)[0]
    output:
        counts="../output/rnaseq-counts-wf/segment_counts/{srx}.bam.segment.counts.txt.gz",
        jcounts="../output/rnaseq-counts-wf/segment_counts/{srx}.bam.segment.counts.jcounts.txt.gz",
    log: "../output/rnaseq-counts-wf/logs/segment_counts/{srx}.log"
    params:
        extra_pe = '-p -P -C -J -t segment -g ID ',
        extra_se = '-J -t segment -g ID '
    group: "rnaseq-counts-wf"
    threads: THREADS
    # resources:
    #     mem_gb=MEM,
    #     time_hr=TIME,
    #     lscratch=LSCRATCH,
    script: "scripts/featurecounts.py"

rule fusion_counts:
    input:
        bam="../output/rnaseq-wf/bams/{srx}/{srx}.bam",
        gtf="../output/nonstranded_exon_fusions.gtf",
        layout=lambda wildcards: queue.expand("../output/fastq-wf/layout/{srr}.parquet", wildcards.srx)[0],
        strand=lambda wildcards: queue.expand("../output/prealn-wf/strand/{srr}.parquet", wildcards.srx)[0]
    output:
        counts="../output/rnaseq-counts-wf/fusion_counts/{srx}.bam.fusion.counts.txt.gz",
        jcounts="../output/rnaseq-counts-wf/fusion_counts/{srx}.bam.fusion.counts.jcounts.txt.gz",
    log: "../output/rnaseq-counts-wf/logs/fusion_counts/{srx}.log"
    params:
        extra_pe = '-p -P -C -J -t fusion -g ID ',
        extra_se = '-J -t fusion -g ID '
    group: "rnaseq-counts-wf"
    threads: THREADS
    # resources:
    #     mem_gb=MEM,
    #     time_hr=TIME,
    #     lscratch=LSCRATCH,
    script: "scripts/featurecounts.py"

def _grouper(wildcards):
    _srxs = chunks[wildcards.group]
    return flatten([
        expand(rules.gene_counts.output.counts, srx=_srxs),
        expand(rules.intergenic_counts.output.counts, srx=_srxs),
        expand(rules.segment_counts.output.counts, srx=_srxs),
        expand(rules.fusion_counts.output.counts, srx=_srxs),
    ])

rule grouper:
    input: _grouper
    output: "../output/rnaseq-counts-wf/groups/{group}.txt"
    group: "rnaseq-counts-wf"
    threads: THREADS
    resources:
        mem_gb=MEM,
        time_hr=TIME,
        lscratch=LSCRATCH,
    shell: "touch {output[0]}"

rule srx_complete:
    input: expand(rules.grouper.output, group=chunks.keys())
    output: temp("../output/rnaseq-counts-wf/done/{group}")
    params:
        files = [
            rules.gene_counts.output.counts,
            rules.intergenic_counts.output.counts,
            rules.segment_counts.output.counts,
            rules.fusion_counts.output.counts,
        ]
    run:
        for _srx in chunks[wildcards.group]:
            _pths = [Path(x.format(srx=_srx)).exists() for x in params.files]
            if all(_pths):
                Path("../output/rnaseq-counts-wf/done.txt").open("at").write(f"{_srx}\n")
