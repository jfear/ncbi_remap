"""The plotting module house code to make various plots.

The module makes plotting easier and consistent. It does this loading custom
matplotlib styles and having each plot generated by a custom class.
"""
from collections import ChainMap
from typing import Union, List
from pathlib import Path
import matplotlib.pyplot as plt

# Add stylib to matplotlib library
FILE_PATH = Path(__file__).absolute().parent
plt.style.core.USER_LIBRARY_PATHS.append(Path(FILE_PATH, "../../stylelib").as_posix())
plt.style.core.update_user_library(plt.style.library)
plt.style.reload_library()


def update_kwargs(defaults: Union[None, dict], user: Union[None, dict]) -> dict:
    """Updates a default dictionary with user values."""
    defaults = defaults or {}
    user = user or {}
    return dict(ChainMap({}, user, defaults))


class NcbiPlotter:
    """Base class for making consistent plots."""

    fig_width = plt.rcParams["figure.figsize"][0]
    fig_height = plt.rcParams["figure.figsize"][1]
    fig_nrows = 1
    fig_ncols = 1

    def get_ax(self) -> Union[plt.Axes, List[plt.Axes]]:
        """Get matplotlib axes.

        Returns
        -------
        Union[plt.Axes, List[plt.Axes]]
        """
        _, axes = plt.subplots(
            self.fig_nrows, self.fig_ncols, figsize=(self.fig_width, self.fig_height)
        )
        return axes

    def update_figsize(self, wmul: Union[int, float] = 1, hmul: Union[int, float] = 1):
        """Update figsize based on rcParams.

        Parameters
        ----------
        wmul : Union[int, float], optional
            Multiply the figure width by this value, by default 1
        hmul : Union[int, float], optional
            Multiply the figure height by this value, by default 1
        """
        self.fig_width = plt.rcParams["figure.figsize"][0] * wmul
        self.fig_height = plt.rcParams["figure.figsize"][1] * hmul

