"""A Subworkflow for downloading and processing FASTQ files."""
import os

# Setup tempdir to work with lscratch
if os.getenv("SLURM_JOBID"):
    TMPDIR = os.path.join('/lscratch', os.getenv('SLURM_JOBID'))
else:
    TMPDIR = os.getenv('TMPDIR', "/tmp")

shell.prefix(f"set -euo pipefail; export TMPDIR={TMPDIR};")

rule se_example:
    input: 
        r1="../output/fastq-wf/fastqs/SRR031744_1.fastq.gz",
        r2="../output/fastq-wf/fastqs/SRR031744_2.fastq.gz",

rule pe_example:
    input: 
        r1="../output/fastq-wf/fastqs/SRR031714_1.fastq.gz",
        r2="../output/fastq-wf/fastqs/SRR031714_2.fastq.gz",


rule sra_prefetch:
    """Downloads container file from the SRA"""
    output: "../output/fastq-wf/sra_cache/{srr}.sra"
    log: "../output/fastq-wf/sra_download_logs/{srr}.log"
    conda: "./conda.yaml"
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 2,
        time_hr=lambda wildcards, attempt: attempt * 8
    shell: "prefetch --output-file {output[0]} {wildcards.srr} > {log} 2>&1"


rule fastq_gz:
    input: rules.sra_prefetch.output[0]
    output: 
        r1="../output/fastq-wf/fastqs/{srr}_1.fastq.gz",
        r2="../output/fastq-wf/fastqs/{srr}_2.fastq.gz",
    conda: "./conda.yaml"
    threads: 8
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 4,
        time_hr=lambda wildcards, attempt: attempt * 12
    script: "./scripts/fastq_extract.py"


rule fastq_check:
    input: 
        sra=rules.sra_prefetch.output[0],
        r1=rules.fastq_gz.output.r1,
        r2=rules.fastq_gz.output.r2,
        download_log=rules.sra_prefetch.log
    output: 
        layout="../output/fastq-wf/fastq_info/{srr}/LAYOUT",
        summary="../output/fastq-wf/fastq_info/{srr}/summary.tsv"
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 4,
        time_hr=lambda wildcards, attempt: attempt * 12
    script: "./scripts/fastq_check.py"
