"""A Subworkflow for downloading and processing FASTQ files."""
import os

# Setup tempdir to work with lscratch
if os.getenv("SLURM_JOBID"):
    TMPDIR = os.path.join('/lscratch', os.getenv('SLURM_JOBID'))
else:
    TMPDIR = os.getenv('TMPDIR', "/tmp")

shell.prefix(f"set -euo pipefail; export TMPDIR={TMPDIR};")

singularity: "../singularity/drosSRA_workflow.sif"

rule se_example:
    input: 
        layout="../output/fastq-wf/layout/SRR031744.parquet",
        summary="../output/fastq-wf/libsize/SRR031744.parquet"


rule pe_example:
    input: 
        layout="../output/fastq-wf/layout/SRR031714.parquet",
        summary="../output/fastq-wf/libsize/SRR031714.parquet"


rule abi_example:
    input: 
        layout="../output/fastq-wf/layout/SRR8933023.parquet",
        summary="../output/fastq-wf/libsize/SRR8933023.parquet"


rule unequal_seq_qual_example:
    input: 
        layout="../output/fastq-wf/layout/SRR823324.parquet",
        summary="../output/fastq-wf/libsize/SRR823324.parquet"

rule fastq_dump:
    output: 
        r1="../output/fastq-wf/fastqs/{srr}_1.fastq.gz",
        r2="../output/fastq-wf/fastqs/{srr}_2.fastq.gz",
        layout="../output/fastq-wf/layout/{srr}.parquet",
        summary="../output/fastq-wf/libsize/{srr}.parquet"
    params:
        sra="../output/fastq-wf/sra_cache/{srr}.sra",
        download_bad="../output/fastq-wf/download_bad",
        abi_solid="../output/fastq-wf/abi_solid",
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 4,
        time_hr=lambda wildcards, attempt: attempt * 12
    log: "../output/fastq-wf/logs/{srr}.log"
    script: "scripts/fastq_dump.py"

