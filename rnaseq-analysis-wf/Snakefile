"""Downstream analysis for RNA-Seq data.

Workflow for generating downstream files on RNA-Seq data specifically.
"""
import pandas as pd
from pathlib import Path

from ncbi_remap.snakemake import get_flag

# Setup tempdir to work with lscratch
TMPDIR = os.path.join('/lscratch', os.getenv('SLURM_JOBID'))
shell.prefix("set -euo pipefail; export TMPDIR={};".format(TMPDIR))

# Set working dir
workdir: '.'

# import config
configfile: '../config/reference_config.yaml'

patterns = {
    'bam': '../output/aln-wf/samples/{srx}/{srx}.bam',
    'stringtie': '../output/rnaseq-analysis-wf/individual_stringtie/{srx}.stringtie.gtf',
    'merged_bam': '../output/rnaseq-analysis-wf/merged.bam',
    'stringtie_merged': '../output/rnaseq-analysis-wf/aggregate_stringtie/merged.stringtie.gtf',
    'salmon': '../output/rnaseq-analysis-wf/individual_salmon/{srx}.salmon/quant.sf',
    'fastq': '../output/rnaseq-analysis-wf/fastqs/{srx}_1.fastq.gz',
}

# TODO prioritize modENCODE for Claire
metadata = pd.read_parquet('../output/metadata-wf/select_library_strategy.parquet')
srxs = metadata[metadata.Fear_et_al_library_strategy.str.contains('RNA-Seq')].index.tolist()

rule targets:
    input: expand(patterns['stringtie'], srx=srxs)


rule stringTie:
    """Create Individual StringTie GTF.

    Generates a StringTie GTF for each file. Note that if coverage is low
    StringTie may not work well.
    """
    input:
        bam = '../output/aln-wf/samples/{srx}/{srx}.bam',
        gtf = config['references']['dmel']['gtf'],
    output: patterns['stringtie']
    threads: 2
    resources:
      mem_gb=lambda wildcards, attempt: attempt * 1,
      time_hr=lambda wildcards, attempt: attempt * 1
    script: 'scripts/stringtie.py'


rule mergeBam:
    """Merge a large number of bams together."""
    input: expand(patterns['bam'], srx=srxs)
    output: temp(patterns['merged_bam'])
    script: 'scripts/merge_bam.py'


rule stringTie_merged:
    """Create a StringTie GTF from a merged set of BAMs.

    This should get around any coverage issues, but differences in
    strandedness may cause problems.
    """
    input:
        bam = rules.mergeBam.output[0],
        gtf = config['references']['dmel']['gtf'],
    output: patterns['stringtie_merged']
    threads: 2
    resources:
      mem_gb=lambda wildcards, attempt: attempt * 1,
      time_hr=lambda wildcards, attempt: attempt * 1
    script: 'scripts/stringtie.py'


rule fastq_dump:
    output: patterns['fastq']
    script: 'scripts/fastq_dump_for_salmon.py'


rule salmon:
    """Quantify reads coming from transcripts with Salmon"""
    input:
        fastq_r1=rules.fastq_dump.output[0],
        index=config['references']['salmon'],
    output:
        patterns['salmon']
    params:
        index_dir = str(Path(config['references']['salmon']).parent),
        outdir=str(Path(patterns['salmon']).parent)
    log:
        patterns['salmon'] + '.log'
    run:
        # TODO read through options and make sure these are what you want to use.
        paired = len(input.fastq) == 2
        if paired:
            shell(
                'salmon quant '
                '--index {params.index_dir} '
                '--output {params.outdir} '
                '--threads {threads} '
                '--libType=A '
                '--gcBias '
                '--seqBias '
                '-1 {input.fastq[0]} '
                '-2 {input.fastq[1]} '
                '&> {log}'
            )
        else:
            shell(
                'salmon quant '
                '--index {params.index_dir} '
                '--output {params.outdir} '
                '--threads {threads} '
                '--libType=A '
                '--gcBias '
                '--seqBias '
                '-r {input.fastq} '
                '&> {log}'
            )