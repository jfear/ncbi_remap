"""Downstream analysis for RNA-Seq data.

Workflow for generating downstream files on RNA-Seq data specifically.
"""
import pandas as pd
from pathlib import Path

from ncbi_remap.snakemake import get_flag

# Setup tempdir to work with lscratch
if os.getenv("SLURM_JOBID", False):
    TMPDIR = os.path.join('/lscratch', os.getenv('SLURM_JOBID'))
else:
    TMPDIR = os.getenv('TMPDIR', "/tmp")
shell.prefix("set -euo pipefail; export TMPDIR={};".format(TMPDIR))

# Set working dir
workdir: '.'

# import config
configfile: '../config/reference_config.yaml'

patterns = {
    'fastq': '../output/rnaseq-analysis-wf/fastqs/{srx}/{srx}_1.fastq.gz',
    'bam': '../output/aln-wf/samples/{srx}/{srx}.bam',
    'stringtie': '../output/rnaseq-analysis-wf/individual_stringtie/{srx}.stringtie.gtf',
    'merged_bam': '../output/rnaseq-analysis-wf/merged.bam',
    'stringtie_merged': '../output/rnaseq-analysis-wf/aggregate_stringtie/merged.stringtie.gtf',
    'salmon': '../output/rnaseq-analysis-wf/salmon_counts/{srx}.salmon/quant.sf',

}

# TODO change back to full list
#metadata = pd.read_parquet('../output/metadata-wf/select_library_strategy.parquet')
#srxs = metadata[metadata.Fear_et_al_library_strategy.str.contains('RNA-Seq')].index.tolist()[10]

# Prioritize modENCODE
modENCODE = pd.read_csv('../output/modENCODE_sampletable.tsv', sep='\t', index_col=0)
srxs = modENCODE[modENCODE.modENCODE_type.str.contains('RNA-seq')].index.tolist()


rule targets:
    input:
        expand("../output/rnaseq-analysis-wf/{strand}_exon_{method}.gtf", strand=["nonstranded", "stranded"], method=["segments", "fusions"])
#        expand(patterns['stringtie'], srx=srxs),
        # expand(patterns['salmon'], srx=srxs),


rule stringTie:
    """Create Individual StringTie GTF.

    Generates a StringTie GTF for each file. Note that if coverage is low
    StringTie may not work well.
    """
    input:
        bam = '../output/aln-wf/samples/{srx}/{srx}.bam',
        gtf = config['references']['dmel']['gtf'],
    output: patterns['stringtie']
    threads: 2
    resources:
      mem_gb=lambda wildcards, attempt: attempt * 1,
      time_hr=lambda wildcards, attempt: attempt * 1
    script: 'scripts/stringtie.py'


rule mergeBam:
    """Merge a large number of bams together."""
    input: expand(patterns['bam'], srx=srxs)
    output: temp(patterns['merged_bam'])
    script: 'scripts/merge_bam.py'


rule stringTie_merged:
    """Create a StringTie GTF from a merged set of BAMs.

    This should get around any coverage issues, but differences in
    strandedness may cause problems.
    """
    input:
        bam = rules.mergeBam.output[0],
        gtf = config['references']['dmel']['gtf'],
    output: patterns['stringtie_merged']
    threads: 2
    resources:
      mem_gb=lambda wildcards, attempt: attempt * 1,
      time_hr=lambda wildcards, attempt: attempt * 1
    script: 'scripts/stringtie.py'


rule fastq_dump:
    output: patterns['fastq']
    log: patterns['fastq'] + '.log'
    resources:
      mem_gb=lambda wildcards, attempt: attempt * 2,
      time_hr=lambda wildcards, attempt: attempt * 4
    script: 'scripts/fastq_dump_for_salmon.py'


rule salmon:
    """Quantify reads coming from transcripts with Salmon"""
    input:
        fastq = rules.fastq_dump.output[0],
        index = config['references']['dmel']['salmon'],
    output:
        patterns['salmon']
    log:
        patterns['salmon'] + '.log'
    threads: 12
    resources:
      mem_gb=lambda wildcards, attempt: attempt * 12,
      time_hr=lambda wildcards, attempt: attempt * 4
    run:
        fastqs = [
            str(pth)
            for pth in Path(input.fastq).parent.glob('*.fastq.gz')
        ]

        index_dir = str(Path(input.index).parent)
        outdir = str(Path(output[0]).parent)

        paired = len(fastqs) == 2
        if paired:
            shell(
                'salmon quant '
                '--index {index_dir} '
                '--output {outdir} '
                '--threads {threads} '
                '--libType=A '
                '--gcBias '
                '--seqBias '
                '-1 {fastqs[0]} '
                '-2 {fastqs[1]} '
                '&> {log}'
            )
        else:
            shell(
                'salmon quant '
                '--index {index_dir} '
                '--output {outdir} '
                '--threads {threads} '
                '--libType=A '
                '--gcBias '
                '--seqBias '
                '-r {input.fastq} '
                '&> {log}'
            )


rule segment_exons_ignore_strand:
    input: "../lcdb-references/dmel/r6-11/gtf/dmel_r6-11.gtf.db"
    output: "../output/rnaseq-analysis-wf/nonstranded_exon_segments.gtf"
    script: "scripts/segment_exons_ignore_strand.py"


rule segment_exons_with_strand:
    input: "../lcdb-references/dmel/r6-11/gtf/dmel_r6-11.gtf.db"
    output: "../output/rnaseq-analysis-wf/stranded_exon_segments.gtf"
    script: "scripts/segment_exons_with_strand.py"


rule fuse_exons_ignore_strand:
    input: "../lcdb-references/dmel/r6-11/gtf/dmel_r6-11.gtf.db"
    output: "../output/rnaseq-analysis-wf/nonstranded_exon_fusions.gtf"
    script: "scripts/fuse_exons_ignore_strand.py"


rule fuse_exons_with_strand:
    input: "../lcdb-references/dmel/r6-11/gtf/dmel_r6-11.gtf.db"
    output: "../output/rnaseq-analysis-wf/stranded_exon_fusions.gtf"
    script: "scripts/fuse_exons_with_strand.py"