"""Downstream analysis for RNA-Seq data.

Workflow for generating downstream files on RNA-Seq data specifically.
"""
import pandas as pd

# Setup tempdir to work with lscratch
TMPDIR = os.path.join('/lscratch', os.getenv('SLURM_JOBID'))
shell.prefix("set -euo pipefail; export TMPDIR={};".format(TMPDIR))

# Set working dir
workdir: '.'

# import config
configfile: '../config/reference_config.yaml'

patterns = {
    'bam': '../output/aln-wf/samples/{srx}/{srx}.bam',
    'stringtie': '../output/rnaseq-analysis-wf/{srx}.stringtie.gtf',
    'merged_bam': '../output/rnaseq-analysis-wf/merged.bam',
    'stringtie_merged': '../output/rnaseq-analysis-wf/merged.stringtie.gtf',
}

# TODO prioritize modENCODE for Claire
metadata = pd.read_parquet('../output/metadata-wf/select_library_strategy.parquet')
srxs = metadata[metadata.Fear_et_al_library_strategy.str.contains('RNA-Seq')].index.tolist()

rule targets:
    input: expand(patterns['stringtie'], srx=srxs)


rule stringTie:
    """Create Individual StringTie GTF.

    Generates a StringTie GTF for each file. Note that if coverage is low
    StringTie may not work well.
    """
    input:
        bam = '../output/aln-wf/samples/{srx}/{srx}.bam',
        gtf = config['references']['dmel']['gtf'],
    output: patterns['stringtie']
    threads: 2
    resources:
      mem_gb=lambda wildcards, attempt: attempt * 1,
      time_hr=lambda wildcards, attempt: attempt * 1
    script: 'scripts/stringtie.py'


rule mergeBam:
    """Merge a large number of bams together."""
    input: expand(patterns['bam'], srx=srxs)
    output: temp(patterns['merged_bam'])
    script: 'scripts/merge_bam.py'


rule stringTie_merged:
    """Create a StringTie GTF from a merged set of BAMs.

    This should get around any coverage issues, but differences in
    strandedness may cause problems.
    """
    input:
        bam = rules.mergeBam.output[0],
        gtf = config['references']['dmel']['gtf'],
    output: patterns['stringtie_merged']
    threads: 2
    resources:
      mem_gb=lambda wildcards, attempt: attempt * 1,
      time_hr=lambda wildcards, attempt: attempt * 1
    script: 'scripts/stringtie.py'


def _salmon(wildcards):
    # TODO need to add logic to make a list of FASTQs if it is PE or SE
    pass


rule salmon:
    """Quantify reads coming from transcripts with Salmon"""
    input:
        fastq=_salmon,
        index=# TODO add salmon ref,
    output:
        # TODO add list of salmon outputs to patterns
        #c.patterns['salmon']
    params:
        # TODO update these params to point to correct locations
        #index_dir=os.path.dirname(c.refdict[c.organism][config['salmon']['tag']]['salmon']),
        #outdir=os.path.dirname(c.patterns['salmon'])
    log:
        # TODO add back logging
        #c.patterns['salmon'] + '.log'
    run:
        # TODO read through options and make sure these are what you want to use.
        paired = len(input.fastq) == 2
        if paired:
            shell(
                'salmon quant '
                '--index {params.index_dir} '
                '--output {params.outdir} '
                '--threads {threads} '
                '--libType=A '
                '--gcBias '
                '--seqBias '
                '-1 {input.fastq[0]} '
                '-2 {input.fastq[1]} '
                '&> {log}'
            )
        else:
            shell(
                'salmon quant '
                '--index {params.index_dir} '
                '--output {params.outdir} '
                '--threads {threads} '
                '--libType=A '
                '--gcBias '
                '--seqBias '
                '-r {input.fastq} '
                '&> {log}'
            )